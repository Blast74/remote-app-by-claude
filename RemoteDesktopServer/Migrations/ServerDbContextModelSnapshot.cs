// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemoteDesktopServer.Data;

#nullable disable

namespace RemoteDesktopServer.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("GroupApplicationAccess", b =>
                {
                    b.Property<int>("ApplicationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorizedGroupsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApplicationsId", "AuthorizedGroupsId");

                    b.HasIndex("AuthorizedGroupsId");

                    b.ToTable("GroupApplicationAccess");
                });

            modelBuilder.Entity("PublishedApplicationServerUser", b =>
                {
                    b.Property<int>("AuthorizedUsersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublishedApplicationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorizedUsersId", "PublishedApplicationsId");

                    b.HasIndex("PublishedApplicationsId");

                    b.ToTable("PublishedApplicationServerUser");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ApplicationInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CpuUsage")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExitCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExitReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemoryUsageMB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.HasIndex("IsRunning");

                    b.HasIndex("SessionId");

                    b.ToTable("ApplicationInstances");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ApplicationLaunchLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientIP")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LaunchTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LaunchTime");

                    b.HasIndex("SessionId");

                    b.HasIndex("Success");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationLaunchLogs");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.PerformanceSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveSessions")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageResponseTime")
                        .HasColumnType("REAL");

                    b.Property<int>("ConnectedUsers")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CpuUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<double>("DiskUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<long>("MemoryUsageMB")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MemoryUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<double>("NetworkInKbps")
                        .HasColumnType("REAL");

                    b.Property<double>("NetworkOutKbps")
                        .HasColumnType("REAL");

                    b.Property<int?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SystemLoad")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("Timestamp");

                    b.ToTable("PerformanceSnapshots");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.PublishedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowClipboardAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowFileAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowPrinterAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedGroups")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedIPs")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedUsers")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoStart")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvailableHours")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandLineArguments")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnvironmentVariables")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutablePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileAssociations")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLaunchedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LaunchCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxConcurrentInstances")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaxCpuPercent")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxLicenses")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMemoryMB")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MinimizeOnStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireAdminRights")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeoutMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsedLicenses")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkingDirectory")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PublishedApplications");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.SecurityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Severity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("Severity");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityEvents");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificatePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Issuer")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Usage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Thumbprint")
                        .IsUnique();

                    b.HasIndex("ValidUntil");

                    b.ToTable("ServerCertificates");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresRestart")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ServerConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "General",
                            Description = "Server display name",
                            IsEncrypted = false,
                            Key = "ServerName",
                            RequiresRestart = false,
                            UpdatedAt = new DateTime(2025, 7, 10, 13, 0, 57, 632, DateTimeKind.Utc).AddTicks(2546),
                            Value = "RDP-SERVER-01"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Performance",
                            Description = "Maximum concurrent sessions allowed",
                            IsEncrypted = false,
                            Key = "MaxConcurrentSessions",
                            RequiresRestart = false,
                            UpdatedAt = new DateTime(2025, 7, 10, 13, 0, 57, 632, DateTimeKind.Utc).AddTicks(2547),
                            Value = "50"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Security",
                            Description = "Session timeout in minutes",
                            IsEncrypted = false,
                            Key = "SessionTimeout",
                            RequiresRestart = false,
                            UpdatedAt = new DateTime(2025, 7, 10, 13, 0, 57, 632, DateTimeKind.Utc).AddTicks(2549),
                            Value = "480"
                        });
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AudioEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageLatency")
                        .HasColumnType("REAL");

                    b.Property<long>("BytesReceived")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BytesTransferred")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientInfo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ClipboardRedirectionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorDepth")
                        .HasColumnType("INTEGER");

                    b.Property<float>("CpuUsage")
                        .HasColumnType("REAL");

                    b.Property<int>("DesktopHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DesktopWidth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisconnectReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DriveRedirectionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecorded")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("TEXT");

                    b.Property<float>("MemoryUsageMB")
                        .HasColumnType("REAL");

                    b.Property<bool>("PrinterRedirectionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordingPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("StartTime");

                    b.HasIndex("State");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AccountExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowDesktop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowRemoteApp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedHours")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedIPs")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeDirectory")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockoutEndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxConcurrentSessions")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PasswordLastChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username", "Domain")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowDesktop = true,
                            AllowRemoteApp = true,
                            CreatedAt = new DateTime(2025, 7, 10, 13, 0, 57, 632, DateTimeKind.Utc).AddTicks(2354),
                            Domain = "LOCAL",
                            FailedLoginAttempts = 0,
                            FullName = "System Administrator",
                            IsActive = true,
                            IsAdmin = true,
                            IsLocked = false,
                            MaxConcurrentSessions = 10,
                            RequirePasswordChange = false,
                            TwoFactorEnabled = false,
                            Username = "administrator"
                        });
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.SessionActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceAccessed")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityType");

                    b.HasIndex("SessionId");

                    b.HasIndex("Timestamp");

                    b.ToTable("SessionActivities");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.TwoFactorAuth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackupCodes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCodePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecoveryEmail")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServerUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ServerUserId")
                        .IsUnique();

                    b.ToTable("TwoFactorAuths");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedHours")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedIPs")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanAccessAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanAccessDesktop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanAccessRemoteApp")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxConcurrentSessions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionTimeoutMinutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanAccessAdmin = true,
                            CanAccessDesktop = true,
                            CanAccessRemoteApp = true,
                            CreatedAt = new DateTime(2025, 7, 10, 13, 0, 57, 632, DateTimeKind.Utc).AddTicks(2499),
                            Description = "System Administrators with full access",
                            IsActive = true,
                            MaxConcurrentSessions = 10,
                            Name = "Administrators",
                            SessionTimeoutMinutes = 480
                        },
                        new
                        {
                            Id = 2,
                            CanAccessAdmin = false,
                            CanAccessDesktop = true,
                            CanAccessRemoteApp = true,
                            CreatedAt = new DateTime(2025, 7, 10, 13, 0, 57, 632, DateTimeKind.Utc).AddTicks(2521),
                            Description = "Standard users with desktop access",
                            IsActive = true,
                            MaxConcurrentSessions = 2,
                            Name = "Remote Desktop Users",
                            SessionTimeoutMinutes = 240
                        });
                });

            modelBuilder.Entity("UserGroupMembership", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserGroupMembership");
                });

            modelBuilder.Entity("GroupApplicationAccess", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.PublishedApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteDesktopServer.Models.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("AuthorizedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublishedApplicationServerUser", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.ServerUser", null)
                        .WithMany()
                        .HasForeignKey("AuthorizedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteDesktopServer.Models.PublishedApplication", null)
                        .WithMany()
                        .HasForeignKey("PublishedApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ApplicationInstance", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.PublishedApplication", "Application")
                        .WithMany("Instances")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteDesktopServer.Models.ServerSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ApplicationLaunchLog", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.PublishedApplication", "Application")
                        .WithMany("LaunchLogs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteDesktopServer.Models.ServerSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteDesktopServer.Models.ServerUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.PerformanceSnapshot", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.ServerSession", "Session")
                        .WithMany("PerformanceSnapshots")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Session");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.SecurityEvent", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.ServerUser", "User")
                        .WithMany("SecurityEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerSession", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.ServerUser", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.SessionActivity", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.ServerSession", "Session")
                        .WithMany("Activities")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.TwoFactorAuth", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.ServerUser", "ServerUser")
                        .WithOne("TwoFactorAuth")
                        .HasForeignKey("RemoteDesktopServer.Models.TwoFactorAuth", "ServerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServerUser");
                });

            modelBuilder.Entity("UserGroupMembership", b =>
                {
                    b.HasOne("RemoteDesktopServer.Models.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteDesktopServer.Models.ServerUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.PublishedApplication", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("LaunchLogs");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerSession", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("PerformanceSnapshots");
                });

            modelBuilder.Entity("RemoteDesktopServer.Models.ServerUser", b =>
                {
                    b.Navigation("SecurityEvents");

                    b.Navigation("Sessions");

                    b.Navigation("TwoFactorAuth");
                });
#pragma warning restore 612, 618
        }
    }
}
